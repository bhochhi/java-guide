
import static org.junit.Assert.assertEquals;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import org.drools.compiler.kie.builder.impl.InternalKieModule;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.experimental.runners.Enclosed;
import org.junit.runner.RunWith;
import org.kie.api.KieServices;
import org.kie.api.builder.KieBuilder;
import org.kie.api.builder.KieFileSystem;
import org.kie.api.builder.KieScanner;
import org.kie.api.builder.ReleaseId;
import org.kie.api.io.Resource;
import org.kie.api.io.ResourceType;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;
import org.kie.scanner.MavenRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.util.ReflectionTestUtils;

import com.decision.Specification;
import com.decision.dynamicmessages.model.AssociatedPackage;
import com.decision.dynamicmessages.model.Configuration;
import com.decision.dynamicmessages.model.Feature;
import com.decision.dynamicmessages.model.Location;
import com.decision.dynamicmessages.model.Message;
import com.decision.dynamicmessages.model.Package;
import com.decision.dynamicmessages.model.PriceStep;

@RunWith(Enclosed.class)
public class KnowledgeServiceSpecs {

	@Ignore
	public static class RepoService {

		public void deployRules(String version) {
			try {
				KieServices ks = KieServices.Factory.get();
				MavenRepository repo = MavenRepository.getMavenRepository();
				ReleaseId releaseId = ks.newReleaseId("com.decision",
						"dynamicmessages", version);
				InternalKieModule kJar = createArtifact(ks, releaseId);
				repo.deployArtifact(releaseId, kJar, createKPom(releaseId));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		private InternalKieModule createArtifact(KieServices ks,
				ReleaseId releaseId) throws Exception {
			KieFileSystem kfs = ks.newKieFileSystem();
			kfs.writePomXML(getPom(releaseId));		
			Resource resource = ks
					.getResources()
					.newFileSystemResource(
							new File("src/test/resources/test.drl"))
					.setResourceType(ResourceType.DRL);
			kfs.write(resource);
			KieBuilder kieBuilder = ks.newKieBuilder(kfs);
			
			Assert.assertTrue(kieBuilder.buildAll().getResults().getMessages()
					.isEmpty());
			return (InternalKieModule) kieBuilder.getKieModule();
		}

		private File createKPom(ReleaseId releaseId) throws IOException {
			File pomFile = File.createTempFile("pom",".xml");
			FileWriter fw = new FileWriter(pomFile);
			fw.write(getPom(releaseId));
			return pomFile;
		}

		private String getPom(ReleaseId releaseId, ReleaseId... dependencies) {
			String pom = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
					+ "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
					+ "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n"
					+ "  <modelVersion>4.0.0</modelVersion>\n" + "\n"
					+ "  <groupId>" + releaseId.getGroupId() + "</groupId>\n"
					+ "  <artifactId>" + releaseId.getArtifactId()
					+ "</artifactId>\n" + "  <version>"
					+ releaseId.getVersion() + "</version>\n" + "\n";
			if (dependencies != null && dependencies.length > 0) {
				pom += "<dependencies>\n";
				for (ReleaseId dep : dependencies) {
					pom += "<dependency>\n";
					pom += "  <groupId>" + dep.getGroupId() + "</groupId>\n";
					pom += "  <artifactId>" + dep.getArtifactId()
							+ "</artifactId>\n";
					pom += "  <version>" + dep.getVersion() + "</version>\n";
					pom += "</dependency>\n";
				}
				pom += "</dependencies>\n";
			}
			pom += "</project>";
			return pom;
		}

	}

	public static class WhenKnowledgeServiceIsInitializedWhenArtifactExist
			extends Specification {

		private KieContainer kieContainer;
		private KnowledgeService knowledgeService;
		private KieScanner kieScanner;

		@Autowired
		private String version;
		@Autowired
		private Long interval;

		@Override
		public void given() {
			RepoService repoService = new RepoService();
			repoService.deployRules(version);
			knowledgeService = new KnowledgeServiceImpl(interval, version);
		}

		public void when() {
			kieContainer = (KieContainer) ReflectionTestUtils.getField(
					knowledgeService, "kieContainer");
			kieScanner = (KieScanner) ReflectionTestUtils.getField(
					knowledgeService, "kieScanner");
		}

		@Test
		public void kieContainerShouldNotBeNull() throws Exception {
			Assert.assertNotNull(kieContainer);
		}

		@Test
		public void kieSessionShouldNotBeNull() {
			KieSession ks = knowledgeService.getKieSession();
			Assert.assertNotNull(ks);
		}

		@Test
		public void kieScannerShouldNotBeNull() throws Exception {
			Assert.assertNotNull(kieScanner);
		}

	}

	public static class WhenKnowledgeServiceIsInitializedWhenArtifactDoesNotExist
			extends Specification {

		private KieContainer kieContainer;
		private KnowledgeService knowledgeService;
		private KieScanner kieScanner;

		@Override
		public void given() {

		}

		public void when() {
			knowledgeService = new KnowledgeServiceImpl(20000L, "nontestrules");
			kieContainer = (KieContainer) ReflectionTestUtils.getField(
					knowledgeService, "kieContainer");
			kieScanner = (KieScanner) ReflectionTestUtils.getField(
					knowledgeService, "kieScanner");
		}

		@Test
		public void kieContainerShouldBeNull() throws Exception {
			Assert.assertNull(kieContainer);
		}

		@Test(expected = NullPointerException.class)
		public void kieSessionShouldThrowException() {
			knowledgeService.getKieSession();
		}

		@Test
		public void kieScannerShouldBeNull() throws Exception {
			Assert.assertNull(kieScanner);
		}

	}

	public static class WhenFiringRulesWithMatchingConfiguration extends
			Specification {

		private Configuration configuration;

		private KieSession ks;
		private KnowledgeService knowledgeService;
		private int numberOfRulesFired;
		@Autowired
		String version;
		@Autowired
		Long interval;

		@Override
		public void given() {
			RepoService repoService = new RepoService();
			repoService.deployRules(version);
			givenAConfigurationThatMatchesRulesCondition();
			knowledgeService = new KnowledgeServiceImpl(interval, version);
			ks = knowledgeService.getKieSession();
		}

		private void givenAConfigurationThatMatchesRulesCondition() {

			configuration = new Configuration()
			{
				{
					setClientName("ATT");
					setCompetitor("Verizon");
					setProductType("Video");
					setBrowser("Firefox");
					setDeviceType("iPhone");
					setBrowserVersion("14");
					setLocation(new Location () {{
						setZipCode("11111");
						setCity("Boston");
						setState("NY");
						setMsa("Msa");
						setShortDMA("Short Dma");
					}});
					setPriceSteps(new ArrayList<PriceStep>() {
						{
							add(new PriceStep() {
								{
									setStep(1);
									setStartMonth(1);
									setEndMonth(12);
									setPrice(10.00);
								}
							});
						}
						{
							add(new PriceStep() {
								{
									setStep(2);
									setStartMonth(13);
									setEndMonth(24);
									setPrice(15.00);
								}
							});
						}
					});

					setClientPackage(new Package() {
						{
							
									setCompetitorName("Verizon");
									setLanguage("English");
									setEarlyTerminationFee(10);
									setAdvertisedChannelCount(100);
									setDownloadSpeed(40);
									setUploadSpeed(5);
									setTermCommitment(10);
									setStandardMonthlyCharge(10);
									setStandardProfessionalInstallationCharge(10);
									setPromotionalProfessionalInstallationCharge(10);
									setStandardSelfInstallationCharge(10);
									setPromotionalSelfInstallationCharge(10);
									setStandardActivationCharge(10);
									setPromotionalActivationCharge(10);
									setAssociatedPackages(new ArrayList<AssociatedPackage>() {
										{
											add(new AssociatedPackage() {
												{
													setAssociatedPackageName("Package");
													setAvailabilityStatus("Available");
													setFeatures(new ArrayList<Feature>() {
														{
															add(new Feature() {
																{
																	setName("Feature Name");
																	setValue("Value");
																}
															});
														}
													});
												}
											});
										}
									});

								}
							});
						
				};
				};
				
			
			
		}

		@Override
		public void when() {
			ks.insert(configuration);
			numberOfRulesFired = ks.fireAllRules();
		}

		@Test
		public void shouldFireOneRule() {
			assertEquals(1, numberOfRulesFired);
		}

		@Test
		public void shouldReturndynamicMessages() {
			Message dynamicMessages = configuration.getDynamicMessages()
					.iterator().next();
			assertEquals("Hello", dynamicMessages.getMessageType());
			assertEquals("High", dynamicMessages.getPriority());
			assertEquals("Title", dynamicMessages.getTitle());
			assertEquals("Body", dynamicMessages.getBody());
			assertEquals("Bullets", dynamicMessages.getBullets());
			assertEquals("High", dynamicMessages.getCustomerValue());
			assertEquals("Yes", dynamicMessages.getProprietary());
			assertEquals("Subtitle", dynamicMessages.getSubtitle());

		}

	}

}
